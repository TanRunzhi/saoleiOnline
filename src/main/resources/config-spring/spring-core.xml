<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

  <!-- spring启动时扫描项目路径下的properties文件,后续用${key}方式取出对应值,这样可以代码解耦和，后续只需修改properties文件即可 -->
  <bean id="propertyPlaceholderConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
      <list>
        <!-- dataSourse连接池相关属性，代码不在此贴出，会放在打包好的项目里面 -->
        <value>classpath:config-db/db.properties</value>
      </list>
    </property>
  </bean>
  <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    <property name="url" value="${db.jdbcUrl}"/>
    <property name="username" value="${db.user}"/>
    <property name="password" value="${db.password}"/>
    <!-- 配置初始化大小、最小、最大 -->
    <property name="initialSize" value="${db.initialSize}"/>
    <property name="minIdle" value="${db.minIdle}"/>
    <property name="maxActive" value="${db.maxActive}"/>
    <!-- 配置获取连接等待超时的时间 -->
    <property name="maxWait" value="${db.maxWait}"/>
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}"/>
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"/>
    <property name="testWhileIdle" value="${db.testWhileIdle}"/>
    <property name="validationQuery" value="${db.validationQuery}"/>
    <property name="testOnBorrow" value="${db.testOnBorrow}"/>
    <property name="testOnReturn" value="${db.testOnReturn}"/>
    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
    <property name="poolPreparedStatements" value="${db.poolPreparedStatements}"/>
    <property name="maxPoolPreparedStatementPerConnectionSize" value="${db.maxPoolPreparedStatementPerConnectionSize}"/>
    <!-- 开启Druid的监控统计功能 -->
    <property name="filters" value="stat" />
  </bean>

  <bean id="sessionFactory"
        class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <property name="packagesToScan">
      <list>
        <value>com.gwideal.core.entity</value>
        <value>com.gwideal.biz.entity</value>
      </list>
    </property>
    <property name="hibernateProperties">
      <props>
        <!--<prop key="hibernate.hbm2ddl.auto">create</prop>-->
        <prop key="hibernate.dialect">org.hibernate.dialect.MySQL57Dialect</prop>
        <prop key="hibernate.show_sql">false</prop>
        <!-- 开启查询缓存 -->
        <prop key="hibernate.cache.use_query_cache">true</prop>
        <!-- 开启二级缓存 -->
        <prop key="hibernate.cache.use_second_level_cache">true</prop>
        <!-- 高速缓存提供程序 -->
        <!-- 由于spring也使用了Ehcache, 保证双方都使用同一个缓存管理器 -->
        <prop key="hibernate.cache.region.factory_class">
          org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory
        </prop>
        <!-- 强制Hibernate以更人性化的格式将数据存入二级缓存 -->
        <prop key="hibernate.cache.use_structured_entries">true</prop>
        <!-- Hibernate将收集有助于性能调节的统计数据 -->
        <prop key="hibernate.generate_statistics">false</prop>
      </props>
    </property>
  </bean>

  <bean class="org.springframework.jdbc.core.JdbcTemplate" id="jdbcTemplate">
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <!-- 配置Hibernate事务管理器 -->
  <bean id="transactionManager"
        class="org.springframework.orm.hibernate5.HibernateTransactionManager">
    <property name="sessionFactory" ref="sessionFactory"/>
  </bean>
  <tx:annotation-driven transaction-manager="transactionManager"/>

  <!-- 配置事务异常封装 -->
  <bean id="persistenceExceptionTranslationPostProcessor"
        class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

  <!-- 开启AOP监听 -->
  <aop:aspectj-autoproxy expose-proxy="true"/>

  <!--  声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
  <tx:advice id="txAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="add*"/>
      <tx:method name="aj*"/>
      <tx:method name="save*"/>
      <tx:method name="update*"/>
      <tx:method name="modify*"/>
      <tx:method name="edit*"/>
      <tx:method name="delete*"/>
      <tx:method name="remove*"/>
      <tx:method name="repair"/>
      <tx:method name="do*"/>
      <tx:method name="get*" propagation="SUPPORTS"/>
      <tx:method name="find*" propagation="SUPPORTS"/>
      <tx:method name="load*" propagation="SUPPORTS"/>
      <tx:method name="search*" propagation="SUPPORTS"/>
      <tx:method name="*" propagation="SUPPORTS"/>
    </tx:attributes>
  </tx:advice>

  <aop:config expose-proxy="true">
    <!-- 只对业务逻辑层实施事务 -->
    <aop:pointcut id="txPointcut" expression="execution(* com.gwideal.*.manager.*.*(..))"/>
    <!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
    <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
  </aop:config>
  <context:component-scan base-package="com">
    <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    <context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
  </context:component-scan>



  <!-- cacheManager, 指定ehcache.xml的位置 -->
  <bean id="cacheManagerEhcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
    <property name="configLocation" value="classpath:config-cache/ehcache.xml"/>
    <!-- 由于hibernate也使用了Ehcache, 保证双方都使用同一个缓存管理器 -->
    <property name="shared" value="true"/>
  </bean>

  <context:component-scan base-package="com.gwideal.core.interceptor"/>

  <!-- 配置eh缓存管理器 -->
  <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"/>

  <!-- 配置一个简单的缓存工厂bean对象 -->
  <bean id="simpleCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
    <property name="cacheManager" ref="cacheManager"/>
    <!-- 使用缓存 关联ehcache.xml中的缓存配置 -->
    <property name="cacheName" value="mobileCache"/>
  </bean>

  <!-- 配置一个缓存拦截器对象，处理具体的缓存业务 -->
  <bean id="methodCacheInterceptor" class="com.gwideal.core.interceptor.MethodCacheInterceptor">
    <property name="cache" ref="simpleCache"/>
  </bean>

  <!-- 参与缓存的切入点对象 (切入点对象，确定何时何地调用拦截器) -->
  <bean id="methodCachePointCut" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
    <!-- 配置缓存aop切面 -->
    <property name="advice" ref="methodCacheInterceptor"/>
    <!-- 配置哪些方法参与缓存策略 -->
    <!--
        .表示符合任何单一字元
        ###  +表示符合前一个字元一次或多次
        ###  *表示符合前一个字元零次或多次
        ###  \Escape任何Regular expression使用到的符号
    -->
    <!-- .*表示前面的前缀(包括包名) 表示print方法-->
    <property name="patterns">
      <list>
        <value>com.gwideal.*.*Mng*\.*getCache.*</value>
        <value>com.gwideal.*.*Mng*\.*getJSON.*</value>
      </list>
    </property>
  </bean>

  <import resource="spring-websocket.xml"/>
</beans>